# coding: utf-8

"""
    ICOS

    Access to data and metadata from the european Integrated Carbon Observation System, ICOS. The Carbon Poral is a one stop shop for european high quality greenhouse gas measurements.  This API is for users who like to have an easy access to the most common data objects and information about the research stations.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: info@icos-cp.eu
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def icoscp_get_collections(self, **kwargs):  # noqa: E501
        """A list of data collections  # noqa: E501

        No parameters returns a list of collection id's with a short description for each collection (what kind of data is included, size, data object id's.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.icoscp_get_collections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Collection id returns a list of data object descriptors, included in a specific collection. 
        :param int limit: limit the amount of entries returned. Very useful to test your query before you possibly get a list of thousands fo entries.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.icoscp_get_collections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.icoscp_get_collections_with_http_info(**kwargs)  # noqa: E501
            return data

    def icoscp_get_collections_with_http_info(self, **kwargs):  # noqa: E501
        """A list of data collections  # noqa: E501

        No parameters returns a list of collection id's with a short description for each collection (what kind of data is included, size, data object id's.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.icoscp_get_collections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Collection id returns a list of data object descriptors, included in a specific collection. 
        :param int limit: limit the amount of entries returned. Very useful to test your query before you possibly get a list of thousands fo entries.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method icoscp_get_collections" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def icoscp_get_data(self, **kwargs):  # noqa: E501
        """A list of data objects  # noqa: E501

        Download a list of data objects or if you provide a valid data object ID, you get the information about that specific digital object. If you don't set the paramater \"limit\", by default we set a limit of 25.  If you want \"all\" you need to set limit to -1. But be very careful, we have thousands of data objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.icoscp_get_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: please provide a vlid digital object id to download data
        :param str theme: This is a filter for data belonging to: - ATC (atmosphere) - ETC (ecosystem) - OTC (ocean)
        :param int start_date: The measurement/observation data first time stamp is...yyyymmdd 
        :param int end_date: The measurement/observation data last time stamp is...yyyymmdd
        :param str variable: This is a full list of variables collected from the ICOS stations. Depending on the THEME and CLASS of the station, not all the variables are available.
        :param int limit: You can limit the returned list to N entries. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.icoscp_get_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.icoscp_get_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def icoscp_get_data_with_http_info(self, **kwargs):  # noqa: E501
        """A list of data objects  # noqa: E501

        Download a list of data objects or if you provide a valid data object ID, you get the information about that specific digital object. If you don't set the paramater \"limit\", by default we set a limit of 25.  If you want \"all\" you need to set limit to -1. But be very careful, we have thousands of data objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.icoscp_get_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: please provide a vlid digital object id to download data
        :param str theme: This is a filter for data belonging to: - ATC (atmosphere) - ETC (ecosystem) - OTC (ocean)
        :param int start_date: The measurement/observation data first time stamp is...yyyymmdd 
        :param int end_date: The measurement/observation data last time stamp is...yyyymmdd
        :param str variable: This is a full list of variables collected from the ICOS stations. Depending on the THEME and CLASS of the station, not all the variables are available.
        :param int limit: You can limit the returned list to N entries. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'theme', 'start_date', 'end_date', 'variable', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method icoscp_get_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'theme' in local_var_params:
            query_params.append(('theme', local_var_params['theme']))  # noqa: E501
        if 'start_date' in local_var_params:
            query_params.append(('startDate', local_var_params['start_date']))  # noqa: E501
        if 'end_date' in local_var_params:
            query_params.append(('endDate', local_var_params['end_date']))  # noqa: E501
        if 'variable' in local_var_params:
            query_params.append(('variable', local_var_params['variable']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def icoscp_get_download(self, id, **kwargs):  # noqa: E501
        """Download data  # noqa: E501

        Download specific data objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.icoscp_get_download(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] id: Digital object identifier.Provide an array of id's in the form [id1, id2, id3]. For a single file you still need to provide an array, with only one entry [id1]. (required)
        :param str format: The files you download are normally combined with meta data, licence information citation strings, etc. Hence we will pack these files together. By default you get a zip file.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.icoscp_get_download_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.icoscp_get_download_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def icoscp_get_download_with_http_info(self, id, **kwargs):  # noqa: E501
        """Download data  # noqa: E501

        Download specific data objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.icoscp_get_download_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] id: Digital object identifier.Provide an array of id's in the form [id1, id2, id3]. For a single file you still need to provide an array, with only one entry [id1]. (required)
        :param str format: The files you download are normally combined with meta data, licence information citation strings, etc. Hence we will pack these files together. By default you get a zip file.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method icoscp_get_download" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `icoscp_get_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'format' in local_var_params:
            query_params.append(('format', local_var_params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def icoscp_get_provisional_stations(self, **kwargs):  # noqa: E501
        """Povisional ICOS stations  # noqa: E501

        get a list of icos stations in the labeling process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.icoscp_get_provisional_stations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country: Returns a list of stations for a specific country. https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#WO
        :param str theme: ICOS has three main distinction of themes, where green hous gas measurments are collected: OTC (Ocean), ETC (Ecosystem), ATC (Atmosphere). 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.icoscp_get_provisional_stations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.icoscp_get_provisional_stations_with_http_info(**kwargs)  # noqa: E501
            return data

    def icoscp_get_provisional_stations_with_http_info(self, **kwargs):  # noqa: E501
        """Povisional ICOS stations  # noqa: E501

        get a list of icos stations in the labeling process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.icoscp_get_provisional_stations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country: Returns a list of stations for a specific country. https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#WO
        :param str theme: ICOS has three main distinction of themes, where green hous gas measurments are collected: OTC (Ocean), ETC (Ecosystem), ATC (Atmosphere). 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['country', 'theme']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method icoscp_get_provisional_stations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'country' in local_var_params:
            query_params.append(('country', local_var_params['country']))  # noqa: E501
        if 'theme' in local_var_params:
            query_params.append(('theme', local_var_params['theme']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stations/provisional', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def icoscp_get_stations(self, **kwargs):  # noqa: E501
        """A list of ICOS stations  # noqa: E501

        without any parameters returns a list of all labeled and certified ICOS stations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.icoscp_get_stations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country: Returns a list of stations for a specific country. https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#WO
        :param str id: Return the metadata about an ICOS station. The same information as seen online at the \"landing page\". The landing page URL is returned with the parameter \"url\"
        :param str theme: ICOS has three main distinction of themes, where green hous gas measurments are collected: OTC (Ocean), ETC (Ecosystem), ATC (Atmosphere). 
        :param str _class: ICOS has two levels of station classifiction. Class 2: a minimum common set of variables for each theme are collected. Class 1: on top of Class 2, a defined extended set of variables is measured. 
        :param list[float] bb: bounding box. If you provide latitude and longitude of the top left corner and bottom right corner of a box, you will get a list of icos stations within that box. Example: api/stations?bb=[50,-10, 30, 15]
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.icoscp_get_stations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.icoscp_get_stations_with_http_info(**kwargs)  # noqa: E501
            return data

    def icoscp_get_stations_with_http_info(self, **kwargs):  # noqa: E501
        """A list of ICOS stations  # noqa: E501

        without any parameters returns a list of all labeled and certified ICOS stations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.icoscp_get_stations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country: Returns a list of stations for a specific country. https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#WO
        :param str id: Return the metadata about an ICOS station. The same information as seen online at the \"landing page\". The landing page URL is returned with the parameter \"url\"
        :param str theme: ICOS has three main distinction of themes, where green hous gas measurments are collected: OTC (Ocean), ETC (Ecosystem), ATC (Atmosphere). 
        :param str _class: ICOS has two levels of station classifiction. Class 2: a minimum common set of variables for each theme are collected. Class 1: on top of Class 2, a defined extended set of variables is measured. 
        :param list[float] bb: bounding box. If you provide latitude and longitude of the top left corner and bottom right corner of a box, you will get a list of icos stations within that box. Example: api/stations?bb=[50,-10, 30, 15]
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['country', 'id', 'theme', '_class', 'bb']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method icoscp_get_stations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'country' in local_var_params:
            query_params.append(('country', local_var_params['country']))  # noqa: E501
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'theme' in local_var_params:
            query_params.append(('theme', local_var_params['theme']))  # noqa: E501
        if '_class' in local_var_params:
            query_params.append(('class', local_var_params['_class']))  # noqa: E501
        if 'bb' in local_var_params:
            query_params.append(('bb', local_var_params['bb']))  # noqa: E501
            collection_formats['bb'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
